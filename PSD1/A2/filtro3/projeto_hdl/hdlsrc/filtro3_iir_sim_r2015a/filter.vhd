-- ------------------------------------------------------------
-- 
-- File Name: /home/vinicius.ls/PSD1/A2/filtro3/projeto_hdl/hdlsrc/filtro3_iir_sim_r2015a/filter
-- Created: 2019-07-09 01:42:00
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- ------------------------------------------------------------
-- 
-- 
-- ------------------------------------------------------------
-- 
-- Module: filter
-- Source Path: /filter
-- 
-- ------------------------------------------------------------
-- 
-- HDL Implementation    : Fully parallel
-- Multipliers           : 17
-- Folding Factor        : 1


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk                             :   IN    std_logic; 
         enb                             :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    real; -- double
         filter_out                      :   OUT   real  -- double
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF real; -- double
  -- Constants
  CONSTANT scaleconst1                    : real := 8.5320472717285156E-03; -- double
  CONSTANT coeff_b1_section1              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section1              : real := 3.5335394867912640E-01; -- double
  CONSTANT coeff_b3_section1              : real := 9.9999999999998934E-01; -- double
  CONSTANT coeff_a2_section1              : real := 8.1481901115126243E-01; -- double
  CONSTANT coeff_a3_section1              : real := 8.4363360269796828E-01; -- double
  CONSTANT coeff_b1_section2              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section2              : real := 1.4071557923233888E+00; -- double
  CONSTANT coeff_b3_section2              : real := 9.9999999999997469E-01; -- double
  CONSTANT coeff_a2_section2              : real := 9.6587971098294756E-01; -- double
  CONSTANT coeff_a3_section2              : real := 8.5101192033139472E-01; -- double
  CONSTANT coeff_b1_section3              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section3              : real := 7.2552002406560245E-01; -- double
  CONSTANT coeff_b3_section3              : real := 9.9999999999999944E-01; -- double
  CONSTANT coeff_a2_section3              : real := 8.1260336759379326E-01; -- double
  CONSTANT coeff_a3_section3              : real := 9.5492433374337293E-01; -- double
  CONSTANT coeff_b1_section4              : real := 1.0000000000000000E+00; -- double
  CONSTANT coeff_b2_section4              : real := 1.1740048853538356E+00; -- double
  CONSTANT coeff_b3_section4              : real := 1.0000000000000409E+00; -- double
  CONSTANT coeff_a2_section4              : real := 1.0659691505063742E+00; -- double
  CONSTANT coeff_a3_section4              : real := 9.5884271180059311E-01; -- double
  -- Signals
  SIGNAL input_typeconvert                : real := 0.0; -- double
  SIGNAL scale1                           : real := 0.0; -- double
  SIGNAL scaletypeconvert1                : real := 0.0; -- double
  -- Section 1 Signals 
  SIGNAL a1sum1                           : real := 0.0; -- double
  SIGNAL a2sum1                           : real := 0.0; -- double
  SIGNAL b1sum1                           : real := 0.0; -- double
  SIGNAL b2sum1                           : real := 0.0; -- double
  SIGNAL delay_section1                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv1                       : real := 0.0; -- double
  SIGNAL a2mul1                           : real := 0.0; -- double
  SIGNAL a3mul1                           : real := 0.0; -- double
  SIGNAL b1mul1                           : real := 0.0; -- double
  SIGNAL b2mul1                           : real := 0.0; -- double
  SIGNAL b3mul1                           : real := 0.0; -- double
  -- Section 2 Signals 
  SIGNAL a1sum2                           : real := 0.0; -- double
  SIGNAL a2sum2                           : real := 0.0; -- double
  SIGNAL b1sum2                           : real := 0.0; -- double
  SIGNAL b2sum2                           : real := 0.0; -- double
  SIGNAL delay_section2                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv2                       : real := 0.0; -- double
  SIGNAL a2mul2                           : real := 0.0; -- double
  SIGNAL a3mul2                           : real := 0.0; -- double
  SIGNAL b1mul2                           : real := 0.0; -- double
  SIGNAL b2mul2                           : real := 0.0; -- double
  SIGNAL b3mul2                           : real := 0.0; -- double
  -- Section 3 Signals 
  SIGNAL a1sum3                           : real := 0.0; -- double
  SIGNAL a2sum3                           : real := 0.0; -- double
  SIGNAL b1sum3                           : real := 0.0; -- double
  SIGNAL b2sum3                           : real := 0.0; -- double
  SIGNAL delay_section3                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv3                       : real := 0.0; -- double
  SIGNAL a2mul3                           : real := 0.0; -- double
  SIGNAL a3mul3                           : real := 0.0; -- double
  SIGNAL b1mul3                           : real := 0.0; -- double
  SIGNAL b2mul3                           : real := 0.0; -- double
  SIGNAL b3mul3                           : real := 0.0; -- double
  -- Section 4 Signals 
  SIGNAL a1sum4                           : real := 0.0; -- double
  SIGNAL a2sum4                           : real := 0.0; -- double
  SIGNAL b1sum4                           : real := 0.0; -- double
  SIGNAL b2sum4                           : real := 0.0; -- double
  SIGNAL delay_section4                   : delay_pipeline_type(0 TO 1) := (0.0, 0.0); -- double
  SIGNAL inputconv4                       : real := 0.0; -- double
  SIGNAL a2mul4                           : real := 0.0; -- double
  SIGNAL a3mul4                           : real := 0.0; -- double
  SIGNAL b1mul4                           : real := 0.0; -- double
  SIGNAL b2mul4                           : real := 0.0; -- double
  SIGNAL b3mul4                           : real := 0.0; -- double
  SIGNAL output_typeconvert               : real := 0.0; -- double


BEGIN

  -- Block Statements
  input_typeconvert <= filter_in;


  scale1 <= input_typeconvert * scaleconst1;

  scaletypeconvert1 <= scale1;


  --   ------------------ Section 1 ------------------

  delay_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1(0) <= 0.0000000000000000E+00;
      delay_section1(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section1(1) <= delay_section1(0);
        delay_section1(0) <= a1sum1;
      END IF;
    END IF;
  END PROCESS delay_process_section1;

  inputconv1 <= scaletypeconvert1;


  a2mul1 <= delay_section1(0) * coeff_a2_section1;

  a3mul1 <= delay_section1(1) * coeff_a3_section1;

  b1mul1 <= a1sum1;


  b2mul1 <= delay_section1(0) * coeff_b2_section1;

  b3mul1 <= delay_section1(1) * coeff_b3_section1;

  a2sum1 <= inputconv1 - a2mul1;

  a1sum1 <= a2sum1 - a3mul1;

  b2sum1 <= b1mul1 + b2mul1;

  b1sum1 <= b2sum1 + b3mul1;

  --   ------------------ Section 2 ------------------

  delay_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2(0) <= 0.0000000000000000E+00;
      delay_section2(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section2(1) <= delay_section2(0);
        delay_section2(0) <= a1sum2;
      END IF;
    END IF;
  END PROCESS delay_process_section2;

  inputconv2 <= b1sum1;


  a2mul2 <= delay_section2(0) * coeff_a2_section2;

  a3mul2 <= delay_section2(1) * coeff_a3_section2;

  b1mul2 <= a1sum2;


  b2mul2 <= delay_section2(0) * coeff_b2_section2;

  b3mul2 <= delay_section2(1) * coeff_b3_section2;

  a2sum2 <= inputconv2 - a2mul2;

  a1sum2 <= a2sum2 - a3mul2;

  b2sum2 <= b1mul2 + b2mul2;

  b1sum2 <= b2sum2 + b3mul2;

  --   ------------------ Section 3 ------------------

  delay_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3(0) <= 0.0000000000000000E+00;
      delay_section3(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section3(1) <= delay_section3(0);
        delay_section3(0) <= a1sum3;
      END IF;
    END IF;
  END PROCESS delay_process_section3;

  inputconv3 <= b1sum2;


  a2mul3 <= delay_section3(0) * coeff_a2_section3;

  a3mul3 <= delay_section3(1) * coeff_a3_section3;

  b1mul3 <= a1sum3;


  b2mul3 <= delay_section3(0) * coeff_b2_section3;

  b3mul3 <= delay_section3(1) * coeff_b3_section3;

  a2sum3 <= inputconv3 - a2mul3;

  a1sum3 <= a2sum3 - a3mul3;

  b2sum3 <= b1mul3 + b2mul3;

  b1sum3 <= b2sum3 + b3mul3;

  --   ------------------ Section 4 ------------------

  delay_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section4(0) <= 0.0000000000000000E+00;
      delay_section4(1) <= 0.0000000000000000E+00;
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        delay_section4(1) <= delay_section4(0);
        delay_section4(0) <= a1sum4;
      END IF;
    END IF;
  END PROCESS delay_process_section4;

  inputconv4 <= b1sum3;


  a2mul4 <= delay_section4(0) * coeff_a2_section4;

  a3mul4 <= delay_section4(1) * coeff_a3_section4;

  b1mul4 <= a1sum4;


  b2mul4 <= delay_section4(0) * coeff_b2_section4;

  b3mul4 <= delay_section4(1) * coeff_b3_section4;

  a2sum4 <= inputconv4 - a2mul4;

  a1sum4 <= a2sum4 - a3mul4;

  b2sum4 <= b1mul4 + b2mul4;

  b1sum4 <= b2sum4 + b3mul4;

  output_typeconvert <= b1sum4;


  -- Assignment Statements
  filter_out <= output_typeconvert;
END rtl;
