-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/simulink_with_hdl/P1.vhd
-- Created: 2019-07-03 14:41:46
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: P1
-- Source Path: simulink_with_hdl/DUT/P1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY P1 IS
  PORT( clk                               :   IN    std_logic;
        resetx                            :   IN    std_logic;
        enb                               :   IN    std_logic;
        InP1_1                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        Out_P1_1                          :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En29
        Out_P1_2                          :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En27
        );
END P1;


ARCHITECTURE rtl OF P1 IS

  -- Component Declarations
  COMPONENT C1
    PORT( InC1_1                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          InC1_2                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          OutC1_1                         :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En29
          );
  END COMPONENT;

  COMPONENT C2
    PORT( InC1_1                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          InC1_2                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          OutC1_1                         :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En27
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : C1
    USE ENTITY work.C1(rtl);

  FOR ALL : C2
    USE ENTITY work.C2(rtl);

  -- Signals
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL C1_out1                          : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL Sine_Wave1_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sine_Wave2_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL C2_out1                          : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL address_cnt                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL address_cnt_1                    : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  UC1_1 : C1
    PORT MAP( InC1_1 => InP1_1,  -- sfix16_En15
              InC1_2 => std_logic_vector(Constant_out1),  -- sfix16_En15
              OutC1_1 => C1_out1  -- sfix34_En29
              );

  UC2_1 : C2
    PORT MAP( InC1_1 => std_logic_vector(Sine_Wave1_out1),  -- sfix16_En14
              InC1_2 => std_logic_vector(Sine_Wave2_out1),  -- sfix16_En14
              OutC1_1 => C2_out1  -- sfix34_En27
              );

  Constant_out1 <= to_signed(16#7FFF#, 16);

-- ADDRESS COUNTER
  Sine_Wave1_addrcnt_temp_process1 : PROCESS (clk, resetx)
  BEGIN
    IF resetx = '1' THEN
      address_cnt <= to_unsigned(0, 3);
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF address_cnt = to_unsigned(7, 3) THEN
          address_cnt <= to_unsigned(0, 3);
        ELSE
          address_cnt <= address_cnt + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS Sine_Wave1_addrcnt_temp_process1;

-- FULL WAVE LOOKUP TABLE
  PROCESS(address_cnt)
  BEGIN
    CASE address_cnt IS
      WHEN "000" => Sine_Wave1_out1 <= "0000000000000000";
      WHEN "001" => Sine_Wave1_out1 <= "0010110101000001";
      WHEN "010" => Sine_Wave1_out1 <= "0100000000000000";
      WHEN "011" => Sine_Wave1_out1 <= "0010110101000001";
      WHEN "100" => Sine_Wave1_out1 <= "0000000000000000";
      WHEN "101" => Sine_Wave1_out1 <= "1101001010111111";
      WHEN "110" => Sine_Wave1_out1 <= "1100000000000000";
      WHEN "111" => Sine_Wave1_out1 <= "1101001010111111";
      WHEN OTHERS => Sine_Wave1_out1 <= "1101001010111111";
    END CASE;
  END PROCESS;


-- ADDRESS COUNTER
  Sine_Wave2_addrcnt_temp_process2 : PROCESS (clk, resetx)
  BEGIN
    IF resetx = '1' THEN
      address_cnt_1 <= to_unsigned(0, 4);
    ELSIF clk'event AND clk = '1' THEN
      IF enb = '1' THEN
        IF address_cnt_1 = to_unsigned(9, 4) THEN
          address_cnt_1 <= to_unsigned(0, 4);
        ELSE
          address_cnt_1 <= address_cnt_1 + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS Sine_Wave2_addrcnt_temp_process2;

-- FULL WAVE LOOKUP TABLE
  PROCESS(address_cnt_1)
  BEGIN
    CASE address_cnt_1 IS
      WHEN "0000" => Sine_Wave2_out1 <= "0000000000000000";
      WHEN "0001" => Sine_Wave2_out1 <= "0010010110011110";
      WHEN "0010" => Sine_Wave2_out1 <= "0011110011011110";
      WHEN "0011" => Sine_Wave2_out1 <= "0011110011011110";
      WHEN "0100" => Sine_Wave2_out1 <= "0010010110011110";
      WHEN "0101" => Sine_Wave2_out1 <= "0000000000000000";
      WHEN "0110" => Sine_Wave2_out1 <= "1101101001100010";
      WHEN "0111" => Sine_Wave2_out1 <= "1100001100100010";
      WHEN "1000" => Sine_Wave2_out1 <= "1100001100100010";
      WHEN "1001" => Sine_Wave2_out1 <= "1101101001100010";
      WHEN OTHERS => Sine_Wave2_out1 <= "1101101001100010";
    END CASE;
  END PROCESS;


  Out_P1_1 <= C1_out1;

  Out_P1_2 <= C2_out1;

END rtl;

